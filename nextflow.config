/*
 * -------------------------------------------------
 *  lifebit-ai/phenowrangle Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

 // Define image used by pipeline

docker.enabled = true
process.container = 'lifebitai/phenowrangle:94529f2'

// Global default params, used in configs
params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags

  mode = false
  pheno_col = false
  pheno_data = false
  pheno_metadata = false
  query = 'None'
  design_mode = false
  case_group = false
  phewas = false
  id_column = 'Platekey_in_aggregate_VCF-0.0'
  continuous_var_transformation = 'None'
  continuous_var_aggregation = 'mean'
  trait_type = 'binary'
  output_tag = 'traits'
  outdir = './results'

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}


profiles {
  plink_binary { includeConfig 'conf/plink_binary.config' }
  plink_qt { includeConfig 'conf/plink_qt.config' }
  plink_phewas { includeConfig 'conf/plink_phewas.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'lifebit-ai/phenowrangle'
  author = 'Marcos CÃ¡mara Donoso, Christina Chatzipantsiou, Athanasios Kousathanas'
  homePage = 'https://github.com/lifebit-ai/phenowrangle'
  description = 'Workflow for gathering information about genetic traits from GWAS summary statistics'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
